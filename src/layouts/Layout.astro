---
import Footer from "../components/footer.astro"
import Header from "../components/header.astro"

export interface Props {
  title: string
  class?: string
}

const { title, class: className = "" } = Astro.props
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/jpeg" href="/favicon.jpg" />
    <meta name="generator" content={Astro.generator} />
    <link
      rel="preconnect"
      as="style"
      crossorigin
      href="https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.6/dist/web/variable/pretendardvariable-dynamic-subset.css"
    />
    <title>{title}</title>
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-icon-57x57.png" />
    <link rel="apple-touch-icon" sizes="60x60" href="/apple-icon-60x60.png" />
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-icon-72x72.png" />
    <link rel="apple-touch-icon" sizes="76x76" href="/apple-icon-76x76.png" />
    <link
      rel="apple-touch-icon"
      sizes="114x114"
      href="/apple-icon-114x114.png"
    />
    <link
      rel="apple-touch-icon"
      sizes="120x120"
      href="/apple-icon-120x120.png"
    />
    <link
      rel="apple-touch-icon"
      sizes="144x144"
      href="/apple-icon-144x144.png"
    />
    <link
      rel="apple-touch-icon"
      sizes="152x152"
      href="/apple-icon-152x152.png"
    />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="/apple-icon-180x180.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="192x192"
      href="/android-icon-192x192.png"
    />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="96x96" href="/favicon-96x96.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="msapplication-TileColor" content="#000" />
    <meta name="msapplication-TileImage" content="/ms-icon-144x144.png" />
    <meta name="theme-color" content="#000" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta
      name="apple-mobile-web-app-status-bar-style"
      content="black-translucent"
    />
  </head>
  <body
    class="bg-white font-pretendard text-black selection:bg-black selection:text-white dark:bg-neutral-900 dark:text-white dark:selection:bg-white dark:selection:text-black"
  >
    <Header />
    <div class="flex min-h-screen w-full flex-col items-center">
      <div class={`flex w-full max-w-4xl flex-col px-10 py-32 ${className}`}>
        <slot />
      </div>
    </div>
    <Footer />
  </body>
</html>

<script>
  import { PUBLIC_KEY } from "src/utils/webPush"

  if ("serviceWorker" in navigator) {
    navigator.serviceWorker.register("/sw.js")
  }

  function urlBase64ToUint8Array(base64String: string) {
    var padding = "=".repeat((4 - (base64String.length % 4)) % 4)
    var base64 = (base64String + padding).replace(/\-/g, "+").replace(/_/g, "/")

    var rawData = window.atob(base64)
    var outputArray = new Uint8Array(rawData.length)

    for (var i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i)
    }
    return outputArray
  }

  navigator.serviceWorker.ready
    .then((registration) => {
      return registration.pushManager.getSubscription().then((subscription) => {
        if (subscription) return subscription

        const vapidPublicKey = PUBLIC_KEY
        const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey)

        return registration.pushManager.subscribe({
          userVisibleOnly: true,
          applicationServerKey: convertedVapidKey,
        })
      })
    })
    .then(async (subscription) => {
      const res = await fetch("/api/register", {
        method: "post",
        headers: {
          "Content-type": "application/json",
        },
        body: JSON.stringify({
          subscription: subscription.toJSON(),
        }),
      })

      console.log(await res.json())

      const permission = await Notification.requestPermission()
      console.log(permission == "granted")
    })
</script>
