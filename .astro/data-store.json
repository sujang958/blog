[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.9.4","content-config-digest","5e2287b8c91f1536","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://blog.sujang.xyz\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"experimentalDefaultStyles\":true},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"csp\":false},\"legacy\":{\"collections\":false}}","post",["Map",11,12,37,38,57,58,76,77,108,109,138,139,162,163,187,188,223,224,260,261,281,282,339,340,367,368],"jotai-writable-atom",{"id":11,"data":13,"body":19,"filePath":20,"digest":21,"rendered":22},{"title":14,"description":15,"category":16,"date":17,"image":18},"Jotai only accepts WritableAtom","A fix for Jotai's TypeScript error","TypeScript",1694271031026,"/images/jotai-typescript.png","## The Problem\n\nI was using Jotai. I created an atom and used `useSetAtom` to only receive the function that modifies the value but I was getting a TypeScript error.\n\n## The Fix\n\nThe `useSetAtom` function only accepted `WritableAtom` and my atom was just `Atom`. I googled it and found the fix, initializing with `false`. If an atom is initialized with `null` or `undefined`, It won't be a `WritableAtom`.\n\n```ts\n// This is a WritableAtom\nconst myAtom = atom(false)\n\n// This is NOT a WritableAtom\nconst notMyAtom = atom(null)\n```","src/data/post/jotai-writable-atom.md","88242e551967cf99",{"html":23,"metadata":24},"\u003Ch2 id=\"the-problem\">The Problem\u003C/h2>\n\u003Cp>I was using Jotai. I created an atom and used \u003Ccode>useSetAtom\u003C/code> to only receive the function that modifies the value but I was getting a TypeScript error.\u003C/p>\n\u003Ch2 id=\"the-fix\">The Fix\u003C/h2>\n\u003Cp>The \u003Ccode>useSetAtom\u003C/code> function only accepted \u003Ccode>WritableAtom\u003C/code> and my atom was just \u003Ccode>Atom\u003C/code>. I googled it and found the fix, initializing with \u003Ccode>false\u003C/code>. If an atom is initialized with \u003Ccode>null\u003C/code> or \u003Ccode>undefined\u003C/code>, It won’t be a \u003Ccode>WritableAtom\u003C/code>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// This is a WritableAtom\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> myAtom\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> atom\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// This is NOT a WritableAtom\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> notMyAtom\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> atom\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":25,"localImagePaths":33,"remoteImagePaths":34,"frontmatter":35,"imagePaths":36},[26,30],{"depth":27,"slug":28,"text":29},2,"the-problem","The Problem",{"depth":27,"slug":31,"text":32},"the-fix","The Fix",[],[],{"title":14,"description":15,"category":16,"date":17,"image":18},[],"greedy-vs-brute-force",{"id":37,"data":39,"body":45,"filePath":46,"digest":47,"rendered":48},{"title":40,"description":41,"category":42,"date":43,"image":44},"Greedy v/s Brute Force","What's the difference between them?","Algorithm",1723608949937,"/images/greedy-vs-brute-force.png","I was solving [a Leet Code problem](https://leetcode.com/problems/container-with-most-water). It was about finding the biggest rectangle using two different heights of the given heights. For example, if the given heights are [1, 2, 4, 3], then the biggest rectangle’s extent will be 4 because of 2 and 3.\n\n![description](/images/water-container.png)\n\nI thought it was an easy two-pointer problem and immediately made a simple two-pointer O(n^2) algorithm to solve it. And my submission get declined. \n\n## The Problem\n\nI checked the problem’s topics and they were `Array`, `Two Pointers`, and `Greedy`. I was like, “Man, isn’t the Greedy aloghrithm the same as brute force?”. I googled about it and realized that it’s a different thing. So basically, brute force is brute force, and greedy is to choose the best option in each situation. Brute force doesn’t give a freak about the best option, it just brute-forces. Greedy, however, does really think about the best option in each situation. \n\nI changed my nested for loop code to infinite-looping while code and the second pointer nows starts at the end of the array. The change of two pointers that I first implemented is compare the two next height from each pointer and move the pointer whose next height is higher than that of the other. But it was declined by [1, 2, 4, 3] testcase. So I changed the way the two pointers move. Now the one whose current height is lower than that of the other moves.\n\n```ts\nfunction maxArea(height: number[]): number {\n  let answer = 0\n\n  let i = 0\n  let j = height.length - 1\n\n  while (true) {\n    if (i >= j) break\n\n    const left = height[i]\n    const right = height[j]\n\n    const actualHeight = left > right ? right : left\n    const extent = actualHeight * (j - i)\n\n    if (extent > answer) answer = extent\n    if (left \u003C right) i++ \n    else j--\n  }\n\n  return answer\n}\n```\n\nAccepted.","src/data/post/greedy-vs-brute-force.md","413695b3b5262b68",{"html":49,"metadata":50},"\u003Cp>I was solving \u003Ca href=\"https://leetcode.com/problems/container-with-most-water\">a Leet Code problem\u003C/a>. It was about finding the biggest rectangle using two different heights of the given heights. For example, if the given heights are [1, 2, 4, 3], then the biggest rectangle’s extent will be 4 because of 2 and 3.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/water-container.png\" alt=\"description\">\u003C/p>\n\u003Cp>I thought it was an easy two-pointer problem and immediately made a simple two-pointer O(n^2) algorithm to solve it. And my submission get declined.\u003C/p>\n\u003Ch2 id=\"the-problem\">The Problem\u003C/h2>\n\u003Cp>I checked the problem’s topics and they were \u003Ccode>Array\u003C/code>, \u003Ccode>Two Pointers\u003C/code>, and \u003Ccode>Greedy\u003C/code>. I was like, “Man, isn’t the Greedy aloghrithm the same as brute force?”. I googled about it and realized that it’s a different thing. So basically, brute force is brute force, and greedy is to choose the best option in each situation. Brute force doesn’t give a freak about the best option, it just brute-forces. Greedy, however, does really think about the best option in each situation.\u003C/p>\n\u003Cp>I changed my nested for loop code to infinite-looping while code and the second pointer nows starts at the end of the array. The change of two pointers that I first implemented is compare the two next height from each pointer and move the pointer whose next height is higher than that of the other. But it was declined by [1, 2, 4, 3] testcase. So I changed the way the two pointers move. Now the one whose current height is lower than that of the other moves.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> maxArea\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">height\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[])\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> answer \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> j \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> height.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  while\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (i \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> j) \u003C/span>\u003Cspan style=\"color:#F97583\">break\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> left\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> height[i]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> right\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> height[j]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> actualHeight\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> left \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> right \u003C/span>\u003Cspan style=\"color:#F97583\">?\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> right \u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> left\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> extent\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> actualHeight \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (j \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (extent \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> answer) answer \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> extent\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (left \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> right) i\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> j\u003C/span>\u003Cspan style=\"color:#F97583\">--\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> answer\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Accepted.\u003C/p>",{"headings":51,"localImagePaths":53,"remoteImagePaths":54,"frontmatter":55,"imagePaths":56},[52],{"depth":27,"slug":28,"text":29},[],[],{"title":40,"description":41,"category":42,"date":43,"image":44},[],"abort-controller",{"id":57,"data":59,"body":65,"filePath":66,"digest":67,"rendered":68},{"title":60,"description":61,"category":62,"date":63,"image":64},"AbortController","how to cancel your web requests.","JavaScript",1701170294464,"/images/abort-it.png","Let&#039;s say you find yourself in a specific situation: a user sends a request to an external HTTP server and then immediately navigates back in your SPA application. After the user moves on, the data coming from that request is not needed, but the request is still sent to the server. This is an obvious waste of resources. However, it doesn&#039;t affect the user&#039;s screen, so it&#039;s not a big deal.\n\nHowever, the user navigates forward immediately after immediately navigating back, your SPA application will send a request again. And if each response from those requests is different from each other, it can bring the user Cumulative Layout Shift (CLS).\n\nAnd that&#039;s one of the reasons why AbortController exists. AbortController is used to cancel the web requests when desired. If you cancel the web requests when a component is unmounted, you can fix the problems above.\n\n```javascript\nconst SomeComponent = () => {\n  useEffect(() => {\n    const controller = new AbortController()\n\n    fetch(\"http://someurl\", { signal: controller.signal })\n\n    return () => {\n      controller.abort()\n    }\n  }, [])\n}\n```\n\nThis is often done by data-fetching libraries like `react-query` or `swr`.","src/data/post/abort-controller.md","074f901395772559",{"html":69,"metadata":70},"\u003Cp>Let’s say you find yourself in a specific situation: a user sends a request to an external HTTP server and then immediately navigates back in your SPA application. After the user moves on, the data coming from that request is not needed, but the request is still sent to the server. This is an obvious waste of resources. However, it doesn’t affect the user’s screen, so it’s not a big deal.\u003C/p>\n\u003Cp>However, the user navigates forward immediately after immediately navigating back, your SPA application will send a request again. And if each response from those requests is different from each other, it can bring the user Cumulative Layout Shift (CLS).\u003C/p>\n\u003Cp>And that’s one of the reasons why AbortController exists. AbortController is used to cancel the web requests when desired. If you cancel the web requests when a component is unmounted, you can fix the problems above.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> SomeComponent\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  useEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> controller\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> AbortController\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"http://someurl\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { signal: controller.signal })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      controller.\u003C/span>\u003Cspan style=\"color:#B392F0\">abort\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }, [])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This is often done by data-fetching libraries like \u003Ccode>react-query\u003C/code> or \u003Ccode>swr\u003C/code>.\u003C/p>",{"headings":71,"localImagePaths":72,"remoteImagePaths":73,"frontmatter":74,"imagePaths":75},[],[],[],{"title":60,"description":61,"category":62,"date":63,"image":64},[],"closure",{"id":76,"data":78,"body":83,"filePath":84,"digest":85,"rendered":86},{"title":79,"description":80,"category":62,"date":81,"image":82},"Closures and Lexical Scoping","For tech interviews",1682211885500,"/images/closure.png","> A closure is the combination of a function bundled together (enclosed) with references to its surrounding state. _(MDN)_\n\n## Lexical Scoping\n\nLexical scoping is a programming language concept that determines the scope of a variable based on its place in the source code, rather than its place in the execution context. In other words, the scope of a variable is determined by the block of code in which it is declared, not by the function in which it is used.\n\n## Closure\n\nIn JavaScript, a closure is a function that retains access to variables in its lexical scope, even after the outer function has returned. This means that the inner function can still access and manipulate the variables of the outer function, even if the outer function has already completed its execution.\n\nWhen a function is defined inside another function, the inner function forms a closure. This means that the inner function has access to the variables in its parent function's scope, even after the parent function has finished executing. Closures are useful for creating private variables and functions, and for implementing the module pattern in JavaScript.\n\n```js\nfunction makeCounter() {\n  let count = 0\n\n  return function () {\n    return count++\n  }\n}\n\nlet counter = makeCounter()\n\nconsole.log(counter()) // 0\n```\n\nThen, how does the anonymous function remember its lexical environment?\n\n## `[[Environment]]`\n\nEvery function has a hidden property called `[[Environment]]` , which stores the reference to the lexical scope where the function was defined. So, in the code above, the `counter.[[Environment]]` has the reference to the lexical scope which has the value of `count`.\n\nEach time the `counter` function is called, a new lexical scope is created that references the lexical scope stored in the counter `counter.[[Environment]]` as an outer lexical scope. When we call the `counter` function, JavaScript will find the `count` variable. First, JavaScript tries to find it in its lexical scope. But, there is not the `count` variable. So, JavaScript now tries to find `count` variable in the outer lexical scope and found it! Now it's time to increase the value of the `count` variable. And this operation works on the lexical scope where the variable is stored. So the `counter` function can remember the valule of `count` variable.\n\n## Note: memory leaks\n\nOne important consequence of closures is that they can create memory leaks. Because the inner function retains a reference to the outer function's variables, those variables cannot be garbage collected until the inner function is also garbage collected. This means that if you are not careful, you can end up with a lot of unused memory in your application.\n\n## References\n\n[https://javascript.info/closure](https://javascript.info/closure)","src/data/post/closure.md","2bc0c6278450b830",{"html":87,"metadata":88},"\u003Cblockquote>\n\u003Cp>A closure is the combination of a function bundled together (enclosed) with references to its surrounding state. \u003Cem>(MDN)\u003C/em>\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"lexical-scoping\">Lexical Scoping\u003C/h2>\n\u003Cp>Lexical scoping is a programming language concept that determines the scope of a variable based on its place in the source code, rather than its place in the execution context. In other words, the scope of a variable is determined by the block of code in which it is declared, not by the function in which it is used.\u003C/p>\n\u003Ch2 id=\"closure\">Closure\u003C/h2>\n\u003Cp>In JavaScript, a closure is a function that retains access to variables in its lexical scope, even after the outer function has returned. This means that the inner function can still access and manipulate the variables of the outer function, even if the outer function has already completed its execution.\u003C/p>\n\u003Cp>When a function is defined inside another function, the inner function forms a closure. This means that the inner function has access to the variables in its parent function’s scope, even after the parent function has finished executing. Closures are useful for creating private variables and functions, and for implementing the module pattern in JavaScript.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> makeCounter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> count\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> counter \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> makeCounter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">counter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()) \u003C/span>\u003Cspan style=\"color:#6A737D\">// 0\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Then, how does the anonymous function remember its lexical environment?\u003C/p>\n\u003Ch2 id=\"environment\">\u003Ccode>[[Environment]]\u003C/code>\u003C/h2>\n\u003Cp>Every function has a hidden property called \u003Ccode>[[Environment]]\u003C/code> , which stores the reference to the lexical scope where the function was defined. So, in the code above, the \u003Ccode>counter.[[Environment]]\u003C/code> has the reference to the lexical scope which has the value of \u003Ccode>count\u003C/code>.\u003C/p>\n\u003Cp>Each time the \u003Ccode>counter\u003C/code> function is called, a new lexical scope is created that references the lexical scope stored in the counter \u003Ccode>counter.[[Environment]]\u003C/code> as an outer lexical scope. When we call the \u003Ccode>counter\u003C/code> function, JavaScript will find the \u003Ccode>count\u003C/code> variable. First, JavaScript tries to find it in its lexical scope. But, there is not the \u003Ccode>count\u003C/code> variable. So, JavaScript now tries to find \u003Ccode>count\u003C/code> variable in the outer lexical scope and found it! Now it’s time to increase the value of the \u003Ccode>count\u003C/code> variable. And this operation works on the lexical scope where the variable is stored. So the \u003Ccode>counter\u003C/code> function can remember the valule of \u003Ccode>count\u003C/code> variable.\u003C/p>\n\u003Ch2 id=\"note-memory-leaks\">Note: memory leaks\u003C/h2>\n\u003Cp>One important consequence of closures is that they can create memory leaks. Because the inner function retains a reference to the outer function’s variables, those variables cannot be garbage collected until the inner function is also garbage collected. This means that if you are not careful, you can end up with a lot of unused memory in your application.\u003C/p>\n\u003Ch2 id=\"references\">References\u003C/h2>\n\u003Cp>\u003Ca href=\"https://javascript.info/closure\">https://javascript.info/closure\u003C/a>\u003C/p>",{"headings":89,"localImagePaths":104,"remoteImagePaths":105,"frontmatter":106,"imagePaths":107},[90,93,95,98,101],{"depth":27,"slug":91,"text":92},"lexical-scoping","Lexical Scoping",{"depth":27,"slug":76,"text":94},"Closure",{"depth":27,"slug":96,"text":97},"environment","[[Environment]]",{"depth":27,"slug":99,"text":100},"note-memory-leaks","Note: memory leaks",{"depth":27,"slug":102,"text":103},"references","References",[],[],{"title":79,"description":80,"category":62,"date":81,"image":82},[],"promise-allsettled",{"id":108,"data":110,"body":115,"filePath":116,"digest":117,"rendered":118},{"title":111,"description":112,"category":62,"date":113,"image":114},"Promise.allSettled","Save your innocent promise values",1681738568962,"/images/allSettled.png","## Promise\n\nPromises are a powerful abstraction for asynchronous programming in JavaScript. They allow us to write code that is easier to read and maintain than traditional callbacks, as well as avoid common pitfalls like callback hell.\n\n## Promise.all()\n\nThe Promise.all() function is a particularly useful tool for working with multiple Promises at once. It takes an array of Promises as input and returns a Promise that resolves when all of the input Promises have resolved, or rejects when any of them reject.\n\n```ts\nconst [result1, result2] = await Promise.all([\n  fetch(\"http://site.site\"),\n  fetch(\"http://site.site\"),\n])\n```\n\n## Limitations of `Promise.all`\n\nOne limitation of Promise.all() is that it will reject as soon as any of the input Promises reject. This can be frustrating if you want to wait for all of the Promises to settle, even if some of them reject. That's where Promise.allSettled() comes in.\n\n## The Solution: `Promise.allSettled()`\n\nThis function works similarly to Promise.all(), but it always resolves, even if some of the input Promises reject. The resulting Promise resolves to an array of objects, one for each input Promise, indicating whether the Promise fulfilled or rejected and the value or reason.\n\nIn this code, the `greet` function rejects with a 50% chance. If we had used `Promise.all` instead of `Promise.allSettled`, we wouldn't have gotten any value if we had a rejected function. But, with `Promise.allSettled`,\nwe can get results of the functions without any errors. The rejected functions have a `reason` property instead of the `value` property, which is present in the fulfilled functions.\n\n```ts\nconst greet = async (name: string) => {\n  const random = Math.random() * 10\n\n  if (Math.floor(random) \u003C 5) {\n    throw new Error(`I don't like your name, ${name}`)\n  }\n\n  return `Hello ${name}`\n}\n\nPromise.allSettled([\n  greet(\"John\"),\n  greet(\"Domingo\"),\n  greet(\"Juan\"),\n  greet(\"David\"),\n]).then((results) => {\n  for (const result of results) {\n    console.log(result)\n  }\n})\n```\n\n```js\n{ status: 'fulfilled', value: 'Hello John' }\n{ status: 'fulfilled', value: 'Hello Domingo' }\n{ status: 'fulfilled', value: 'Hello Juan' }\n{\n  status: 'rejected',\n  reason: Error: I don't like your name, David\n      at greet (/workspaces/dev/asdf.ts:5:11)\n      at Object.\u003Canonymous> (/workspaces/dev/asdf.ts:15:3)\n      at Module._compile (node:internal/modules/cjs/loader:1275:14)\n      at Module.m._compile (/workspaces/dev/node_modules/ts-node/src/index.ts:1618:23)\n      at Module._extensions..js (node:internal/modules/cjs/loader:1329:10)\n      at Object.require.extensions.\u003Ccomputed> [as .ts] (/workspaces/dev/node_modules/ts-node/src/index.ts:1621:12)\n      at Module.load (node:internal/modules/cjs/loader:1133:32)\n      at Function.Module._load (node:internal/modules/cjs/loader:972:12)\n      at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:83:12)\n      at phase4 (/workspaces/dev/node_modules/ts-node/src/bin.ts:649:14)\n}\n```","src/data/post/Promise-allSettled.md","376cc98362efc2d5",{"html":119,"metadata":120},"\u003Ch2 id=\"promise\">Promise\u003C/h2>\n\u003Cp>Promises are a powerful abstraction for asynchronous programming in JavaScript. They allow us to write code that is easier to read and maintain than traditional callbacks, as well as avoid common pitfalls like callback hell.\u003C/p>\n\u003Ch2 id=\"promiseall\">Promise.all()\u003C/h2>\n\u003Cp>The Promise.all() function is a particularly useful tool for working with multiple Promises at once. It takes an array of Promises as input and returns a Promise that resolves when all of the input Promises have resolved, or rejects when any of them reject.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">result1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">result2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">all\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"http://site.site\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"http://site.site\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">])\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"limitations-of-promiseall\">Limitations of \u003Ccode>Promise.all\u003C/code>\u003C/h2>\n\u003Cp>One limitation of Promise.all() is that it will reject as soon as any of the input Promises reject. This can be frustrating if you want to wait for all of the Promises to settle, even if some of them reject. That’s where Promise.allSettled() comes in.\u003C/p>\n\u003Ch2 id=\"the-solution-promiseallsettled\">The Solution: \u003Ccode>Promise.allSettled()\u003C/code>\u003C/h2>\n\u003Cp>This function works similarly to Promise.all(), but it always resolves, even if some of the input Promises reject. The resulting Promise resolves to an array of objects, one for each input Promise, indicating whether the Promise fulfilled or rejected and the value or reason.\u003C/p>\n\u003Cp>In this code, the \u003Ccode>greet\u003C/code> function rejects with a 50% chance. If we had used \u003Ccode>Promise.all\u003C/code> instead of \u003Ccode>Promise.allSettled\u003C/code>, we wouldn’t have gotten any value if we had a rejected function. But, with \u003Ccode>Promise.allSettled\u003C/code>,\nwe can get results of the functions without any errors. The rejected functions have a \u003Ccode>reason\u003C/code> property instead of the \u003Ccode>value\u003C/code> property, which is present in the fulfilled functions.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> greet\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">name\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> random\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Math.\u003C/span>\u003Cspan style=\"color:#B392F0\">random\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 10\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (Math.\u003C/span>\u003Cspan style=\"color:#B392F0\">floor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(random) \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    throw\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`I don't like your name, ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">name\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `Hello ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">name\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">allSettled\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  greet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"John\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  greet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Domingo\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  greet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Juan\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  greet\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"David\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">]).\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">results\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> result\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> results) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(result)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{ \u003C/span>\u003Cspan style=\"color:#B392F0\">status\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'fulfilled'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hello John'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{ \u003C/span>\u003Cspan style=\"color:#B392F0\">status\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'fulfilled'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hello Domingo'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{ \u003C/span>\u003Cspan style=\"color:#B392F0\">status\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'fulfilled'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hello Juan'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  status\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'rejected'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  reason\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#B392F0\">Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">I\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> don\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'t like your name, Davi\u003C/span>\u003Cspan style=\"color:#FDAEB7;font-style:italic\">d\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      at \u003C/span>\u003Cspan style=\"color:#B392F0\">greet\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">workspaces\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">dev\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">asdf.ts:\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\">11\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      at Object.\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">anonymous\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">workspaces\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">dev\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">asdf.ts:\u003C/span>\u003Cspan style=\"color:#79B8FF\">15\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      at Module.\u003C/span>\u003Cspan style=\"color:#B392F0\">_compile\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (node:internal\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">modules\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">cjs\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">loader:\u003C/span>\u003Cspan style=\"color:#79B8FF\">1275\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\">14\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      at Module.m.\u003C/span>\u003Cspan style=\"color:#B392F0\">_compile\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">workspaces\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">dev\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">node_modules\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">ts\u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\">node\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">src\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">index.ts:\u003C/span>\u003Cspan style=\"color:#79B8FF\">1618\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\">23\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      at Module._extensions..\u003C/span>\u003Cspan style=\"color:#B392F0\">js\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (node:internal\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">modules\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">cjs\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">loader:\u003C/span>\u003Cspan style=\"color:#79B8FF\">1329\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      at Object.require.extensions.\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">computed\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> .\u003C/span>\u003Cspan style=\"color:#B392F0\">ts\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] (\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">workspaces\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">dev\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">node_modules\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">ts\u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\">node\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">src\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">index.ts:\u003C/span>\u003Cspan style=\"color:#79B8FF\">1621\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\">12\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      at Module.\u003C/span>\u003Cspan style=\"color:#B392F0\">load\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (node:internal\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">modules\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">cjs\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">loader:\u003C/span>\u003Cspan style=\"color:#79B8FF\">1133\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\">32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      at Function.Module.\u003C/span>\u003Cspan style=\"color:#B392F0\">_load\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (node:internal\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">modules\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">cjs\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">loader:\u003C/span>\u003Cspan style=\"color:#79B8FF\">972\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\">12\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      at Function.executeUserEntryPoint [\u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> runMain\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] (\u003C/span>\u003Cspan style=\"color:#FFAB70\">node\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\">internal\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#B392F0\">modules\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#B392F0\">run_main\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\">83\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\">12\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      at phase4 (/\u003C/span>\u003Cspan style=\"color:#FFAB70\">workspaces\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#FFAB70\">dev\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#FFAB70\">node_modules\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#FFAB70\">ts\u003C/span>\u003Cspan style=\"color:#E1E4E8\">-\u003C/span>\u003Cspan style=\"color:#FFAB70\">node\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/\u003C/span>\u003Cspan style=\"color:#FFAB70\">src\u003C/span>\u003Cspan style=\"color:#E1E4E8\">/bin.ts\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\">649\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\">14\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":121,"localImagePaths":134,"remoteImagePaths":135,"frontmatter":136,"imagePaths":137},[122,125,128,131],{"depth":27,"slug":123,"text":124},"promise","Promise",{"depth":27,"slug":126,"text":127},"promiseall","Promise.all()",{"depth":27,"slug":129,"text":130},"limitations-of-promiseall","Limitations of Promise.all",{"depth":27,"slug":132,"text":133},"the-solution-promiseallsettled","The Solution: Promise.allSettled()",[],[],{"title":111,"description":112,"category":62,"date":113,"image":114},[],"debouncing-and-throttling",{"id":138,"data":140,"body":145,"filePath":146,"digest":147,"rendered":148},{"title":141,"description":142,"category":62,"date":143,"image":144},"Debouncing and Throttling","How to handle expensive event listeners.",1684845498394,"/images/debouncing_throttling.png","Registering an expensive event listner to a frequent event is a very bad thing that everyone knows. But sometimes you'll need to face situations like calling the server and storing to-dos in the `onInput` event. This will overload the server. Then what should we do?\n\n## Debouncing\n\nDebouncing is a technique used to control the frequency of a function's execution. When debouncing a function, it ensures that the function is invoked only after a specified delay has passed since the last invocation.\n\nWhen you call a debounced function, the already scheduled function is canceled and a new function is scheduled.\n\n```js\nfunction debounce(func, delay) {\n  let timerId\n\n  return function (...args) {\n    clearTimeout(timerId)\n\n    timerId = setTimeout(() => {\n      func.apply(this, args)\n    }, delay)\n  }\n}\n\nfunction handleInput() {\n  console.log(\"Debounced input handling\")\n}\n\nconst debouncedHandleInput = debounce(handleInput, 300)\n\ndocument\n  .getElementById(\"myInput\")\n  .addEventListener(\"input\", debouncedHandleInput)\n```\n\n## Throttling\n\nThrottling is a technique used to limit the rate at which a function can be executed. When throttling a function, it ensures that the function is invoked at most once within a specified time interval, regardless of how many times it is called during that interval.\n\nWhen calling a throttled function, if an already called function is still waiting for the delay, the call is ignored.\n\n```js\nfunction throttle(func, delay) {\n  let canRun = true\n\n  return function (...args) {\n    if (!canRun) return\n\n    canRun = false\n\n    setTimeout(() => {\n      func.apply(this, args)\n      canRun = true\n    }, delay)\n  }\n}\n\nfunction handleScroll() {\n  console.log(\"Throttled scroll handling\")\n}\n\nconst throttledHandleScroll = throttle(handleScroll, 200)\n\nwindow.addEventListener(\"scroll\", throttledHandleScroll)\n```","src/data/post/debouncing-and-throttling.md","720d4d62c2b35759",{"html":149,"metadata":150},"\u003Cp>Registering an expensive event listner to a frequent event is a very bad thing that everyone knows. But sometimes you’ll need to face situations like calling the server and storing to-dos in the \u003Ccode>onInput\u003C/code> event. This will overload the server. Then what should we do?\u003C/p>\n\u003Ch2 id=\"debouncing\">Debouncing\u003C/h2>\n\u003Cp>Debouncing is a technique used to control the frequency of a function’s execution. When debouncing a function, it ensures that the function is invoked only after a specified delay has passed since the last invocation.\u003C/p>\n\u003Cp>When you call a debounced function, the already scheduled function is canceled and a new function is scheduled.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> debounce\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">func\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">delay\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> timerId\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    clearTimeout\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(timerId)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    timerId \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> setTimeout\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      func.\u003C/span>\u003Cspan style=\"color:#B392F0\">apply\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, args)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }, delay)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> handleInput\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Debounced input handling\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> debouncedHandleInput\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> debounce\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(handleInput, \u003C/span>\u003Cspan style=\"color:#79B8FF\">300\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">document\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">getElementById\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"myInput\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">addEventListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"input\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, debouncedHandleInput)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"throttling\">Throttling\u003C/h2>\n\u003Cp>Throttling is a technique used to limit the rate at which a function can be executed. When throttling a function, it ensures that the function is invoked at most once within a specified time interval, regardless of how many times it is called during that interval.\u003C/p>\n\u003Cp>When calling a throttled function, if an already called function is still waiting for the delay, the call is ignored.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> throttle\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">func\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">delay\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> canRun \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">canRun) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    canRun \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    setTimeout\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      func.\u003C/span>\u003Cspan style=\"color:#B392F0\">apply\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, args)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      canRun \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }, delay)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> handleScroll\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Throttled scroll handling\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> throttledHandleScroll\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> throttle\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(handleScroll, \u003C/span>\u003Cspan style=\"color:#79B8FF\">200\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">window.\u003C/span>\u003Cspan style=\"color:#B392F0\">addEventListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"scroll\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, throttledHandleScroll)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":151,"localImagePaths":158,"remoteImagePaths":159,"frontmatter":160,"imagePaths":161},[152,155],{"depth":27,"slug":153,"text":154},"debouncing","Debouncing",{"depth":27,"slug":156,"text":157},"throttling","Throttling",[],[],{"title":141,"description":142,"category":62,"date":143,"image":144},[],"eye-dropper",{"id":162,"data":164,"body":170,"filePath":171,"digest":172,"rendered":173},{"title":165,"description":166,"category":167,"date":168,"image":169},"Picking colors straight on the browser","Eye Dropper API","Web",1719913968533,"/images/dropper-icon.png","## Eye Dropper API\n\nEye Dropper API lets users pick a color from their screen, even if it's outside of the browser window. Straight to the point, you can use it like this\n\n```js\nconst eyeDropper = new EyeDropper()\n\neyeDropper.open().then(color => {\n  console.log(\"Picked color:\", color)\n})\n```\n\nWhen the `open` method is called, a user will get a dropper like this.\n\n![Dropper](/images/dropper.png)\n\nAnd the output will be like this\n\n```js\n\"Picked color: {sRGBHex: '#6cb8ff'}\"\n```\n\n## Limitations\n\nSince the Eye Dropper API is an expermiental API, it is not widely supported for now. Also, for the security, you can't call the `open` method without any user action (like the Clipboard API).\n\n## References\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/EyeDropper_API","src/data/post/eye-dropper.md","ac0ce258d7d1bf91",{"html":174,"metadata":175},"\u003Ch2 id=\"eye-dropper-api\">Eye Dropper API\u003C/h2>\n\u003Cp>Eye Dropper API lets users pick a color from their screen, even if it’s outside of the browser window. Straight to the point, you can use it like this\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> eyeDropper\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> EyeDropper\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">eyeDropper.\u003C/span>\u003Cspan style=\"color:#B392F0\">open\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">color\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Picked color:\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, color)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>When the \u003Ccode>open\u003C/code> method is called, a user will get a dropper like this.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/dropper.png\" alt=\"Dropper\">\u003C/p>\n\u003Cp>And the output will be like this\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\"Picked color: {sRGBHex: '#6cb8ff'}\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"limitations\">Limitations\u003C/h2>\n\u003Cp>Since the Eye Dropper API is an expermiental API, it is not widely supported for now. Also, for the security, you can’t call the \u003Ccode>open\u003C/code> method without any user action (like the Clipboard API).\u003C/p>\n\u003Ch2 id=\"references\">References\u003C/h2>\n\u003Cp>\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/EyeDropper_API\">https://developer.mozilla.org/en-US/docs/Web/API/EyeDropper_API\u003C/a>\u003C/p>",{"headings":176,"localImagePaths":183,"remoteImagePaths":184,"frontmatter":185,"imagePaths":186},[177,179,182],{"depth":27,"slug":178,"text":166},"eye-dropper-api",{"depth":27,"slug":180,"text":181},"limitations","Limitations",{"depth":27,"slug":102,"text":103},[],[],{"title":165,"description":166,"category":167,"date":168,"image":169},[],"generators-and-iterables",{"id":187,"data":189,"body":194,"filePath":195,"digest":196,"rendered":197},{"title":190,"description":191,"category":62,"date":192,"image":193},"Generators and Iterables","Important concepts in JavaScript",1685000628159,"/images/generators.png","Generators and Iterable are two important concepts in JavaScript, which are used to handle data structures in a more efficient way.\n\n## Iterables\n\nAn Iterable is an object that can be iterated over using the `for...of` loop. An iterable object must have a method named `Symbol.iterator` that returns an iterator object. For example, the `Array` object is iterable because it has the `Symbol.iterator` method, which returns an iterator object that can be used to loop over the array.\n\n```js\nconst arr = [1, 2, 3, 4]\nconst iterator = arr[Symbol.iterator]()\nfor (const element of iterator) {\n  console.log(element)\n}\n// Output: 1 2 3 4\n```\n\n## Generators\n\nGenerators are functions that can be paused and resumed during their execution. They are defined using the `function*` syntax and use the `yield` keyword to pause their execution and return a value. When a generator is called, it returns an iterator object that can be used to control its execution.\n\n```js\nfunction* generator() {\n  yield 1\n  yield 2\n  return 3\n}\n\nconst gen = generator()\n\nconsole.log(gen.next()) // { value: 1, done: false }\nconsole.log(gen.next()) // { value: 2, done: false }\nconsole.log(gen.next()) // { value: 3, done: true }\n```\n\nGenerators can also receive values from outside using the `next()` method. The value passed to `next()` becomes the value returned by the `yield` keyword.\n\n```js\nfunction* generator() {\n  const x = yield \"input x\"\n  const y = yield x + 2\n  yield y + 3\n}\n\nconst iterator = generator()\nconsole.log(iterator.next().value) // input x\nconsole.log(iterator.next(4).value) // 6 (4 + 2) 4 goes to x and yield x + 2\nconsole.log(iterator.next(5).value) // 8 (5 + 3)\n```\n\n## Generators are iterable\n\nGenerators are iterable. So they can be used in `for...of` loop.\n\n```js\nfunction* generator() {\n  yield 1\n  yield 2\n  return 3\n}\n\nconst gen = generator()\n\nfor (const value of gen) {\n  console.log(value)\n}\n```\n\n```js\n// Output\n1\n2\n```\n\nNote: the `for...of` loop ignores the last `value` when `done: true`.\n\nSince generators are iterable, you can also use the spread syntax.\n\n```js\nfunction* generator() {\n  yield 1\n  yield 2\n  return 3\n}\n\nconst gen = generator()\nconst arr = [0, ...gen]\n\nconsole.log(arr) // [0, 1, 2]\n```\n\nAnd it's also useful when you create your own `Symbol.iterator` method.\n\n```js\nconst iterableObject = {\n  length: 5,\n\n  *[Symbol.iterator]() {\n    for (let i = 0; i \u003C this.length; i++) {\n      yield i\n    }\n  },\n}\n\nconsole.log([...iterableObject]) // [0, 1, 2, 3, 4]\n```\n\n## Generator.return(value)\n\nThis method finishes the generator’s execution and return the given `value`.\n\n```js\nfunction* generator() {\n  yield 1\n  yield 2\n  return 3\n}\n\nconst gen = generator()\n\nconsole.log(gen.next()) // { value: 1, done: false }\nconsole.log(gen.return(-1)) // { value: -1, done: true }\nconsole.log(gen.next()) // { value: undefined, done: true }\n```\n\n## Generator.throw(error)\n\nThis method passes an error to a `yield` keyword.\n\n```js\nfunction* generator() {\n  yield 1\n  console.log(\"Not reachable log\")\n  yield 2\n  return 3\n}\n\nconst gen = generator()\n\nconsole.log(gen.next()) // { value: 1, done: false }\nconsole.log(gen.throw(\"TL\")) // Uncaught TL\nconsole.log(gen.next()) // ignored\n```\n\nGenerators are useful when dealing with large or infinite data structures, as they allow lazy evaluation of the data. They can also be used to implement custom iteration protocols and control the flow of asynchronous code.\n\n## Conclusion\n\nGenerators and Iterable are two powerful features of JavaScript that can be used to handle data structures in a more efficient and flexible way. They are widely used in modern JavaScript frameworks and libraries and are an essential part of any developer's toolkit.","src/data/post/generators-and-iterables.md","ee87de155ec3ab51",{"html":198,"metadata":199},"\u003Cp>Generators and Iterable are two important concepts in JavaScript, which are used to handle data structures in a more efficient way.\u003C/p>\n\u003Ch2 id=\"iterables\">Iterables\u003C/h2>\n\u003Cp>An Iterable is an object that can be iterated over using the \u003Ccode>for...of\u003C/code> loop. An iterable object must have a method named \u003Ccode>Symbol.iterator\u003C/code> that returns an iterator object. For example, the \u003Ccode>Array\u003C/code> object is iterable because it has the \u003Ccode>Symbol.iterator\u003C/code> method, which returns an iterator object that can be used to loop over the array.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> arr\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> iterator\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr[Symbol.iterator]()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> element\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> iterator) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(element)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Output: 1 2 3 4\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"generators\">Generators\u003C/h2>\n\u003Cp>Generators are functions that can be paused and resumed during their execution. They are defined using the \u003Ccode>function*\u003C/code> syntax and use the \u003Ccode>yield\u003C/code> keyword to pause their execution and return a value. When a generator is called, it returns an iterator object that can be used to control its execution.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> generator\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> gen\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> generator\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(gen.\u003C/span>\u003Cspan style=\"color:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()) \u003C/span>\u003Cspan style=\"color:#6A737D\">// { value: 1, done: false }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(gen.\u003C/span>\u003Cspan style=\"color:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()) \u003C/span>\u003Cspan style=\"color:#6A737D\">// { value: 2, done: false }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(gen.\u003C/span>\u003Cspan style=\"color:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()) \u003C/span>\u003Cspan style=\"color:#6A737D\">// { value: 3, done: true }\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Generators can also receive values from outside using the \u003Ccode>next()\u003C/code> method. The value passed to \u003Ccode>next()\u003C/code> becomes the value returned by the \u003Ccode>yield\u003C/code> keyword.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> generator\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> x\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> yield\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"input x\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> y\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> y \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> iterator\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> generator\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(iterator.\u003C/span>\u003Cspan style=\"color:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().value) \u003C/span>\u003Cspan style=\"color:#6A737D\">// input x\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(iterator.\u003C/span>\u003Cspan style=\"color:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).value) \u003C/span>\u003Cspan style=\"color:#6A737D\">// 6 (4 + 2) 4 goes to x and yield x + 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(iterator.\u003C/span>\u003Cspan style=\"color:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).value) \u003C/span>\u003Cspan style=\"color:#6A737D\">// 8 (5 + 3)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"generators-are-iterable\">Generators are iterable\u003C/h2>\n\u003Cp>Generators are iterable. So they can be used in \u003Ccode>for...of\u003C/code> loop.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> generator\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> gen\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> generator\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> value\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> gen) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(value)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Output\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Note: the \u003Ccode>for...of\u003C/code> loop ignores the last \u003Ccode>value\u003C/code> when \u003Ccode>done: true\u003C/code>.\u003C/p>\n\u003Cp>Since generators are iterable, you can also use the spread syntax.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> generator\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> gen\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> generator\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> arr\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">gen]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(arr) \u003C/span>\u003Cspan style=\"color:#6A737D\">// [0, 1, 2]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And it’s also useful when you create your own \u003Ccode>Symbol.iterator\u003C/code> method.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> iterableObject\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  length: \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[Symbol.iterator]() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      yield\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">iterableObject]) \u003C/span>\u003Cspan style=\"color:#6A737D\">// [0, 1, 2, 3, 4]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"generatorreturnvalue\">Generator.return(value)\u003C/h2>\n\u003Cp>This method finishes the generator’s execution and return the given \u003Ccode>value\u003C/code>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> generator\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> gen\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> generator\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(gen.\u003C/span>\u003Cspan style=\"color:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()) \u003C/span>\u003Cspan style=\"color:#6A737D\">// { value: 1, done: false }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(gen.\u003C/span>\u003Cspan style=\"color:#B392F0\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) \u003C/span>\u003Cspan style=\"color:#6A737D\">// { value: -1, done: true }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(gen.\u003C/span>\u003Cspan style=\"color:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()) \u003C/span>\u003Cspan style=\"color:#6A737D\">// { value: undefined, done: true }\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"generatorthrowerror\">Generator.throw(error)\u003C/h2>\n\u003Cp>This method passes an error to a \u003Ccode>yield\u003C/code> keyword.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function*\u003C/span>\u003Cspan style=\"color:#B392F0\"> generator\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Not reachable log\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  yield\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> gen\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> generator\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(gen.\u003C/span>\u003Cspan style=\"color:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()) \u003C/span>\u003Cspan style=\"color:#6A737D\">// { value: 1, done: false }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(gen.\u003C/span>\u003Cspan style=\"color:#B392F0\">throw\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"TL\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) \u003C/span>\u003Cspan style=\"color:#6A737D\">// Uncaught TL\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(gen.\u003C/span>\u003Cspan style=\"color:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()) \u003C/span>\u003Cspan style=\"color:#6A737D\">// ignored\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Generators are useful when dealing with large or infinite data structures, as they allow lazy evaluation of the data. They can also be used to implement custom iteration protocols and control the flow of asynchronous code.\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>Generators and Iterable are two powerful features of JavaScript that can be used to handle data structures in a more efficient and flexible way. They are widely used in modern JavaScript frameworks and libraries and are an essential part of any developer’s toolkit.\u003C/p>",{"headings":200,"localImagePaths":219,"remoteImagePaths":220,"frontmatter":221,"imagePaths":222},[201,204,207,210,213,216],{"depth":27,"slug":202,"text":203},"iterables","Iterables",{"depth":27,"slug":205,"text":206},"generators","Generators",{"depth":27,"slug":208,"text":209},"generators-are-iterable","Generators are iterable",{"depth":27,"slug":211,"text":212},"generatorreturnvalue","Generator.return(value)",{"depth":27,"slug":214,"text":215},"generatorthrowerror","Generator.throw(error)",{"depth":27,"slug":217,"text":218},"conclusion","Conclusion",[],[],{"title":190,"description":191,"category":62,"date":192,"image":193},[],"n-a-o-operators",{"id":223,"data":225,"body":230,"filePath":231,"digest":232,"rendered":233},{"title":226,"description":227,"category":62,"date":228,"image":229},"??=, ||=, &&=","Another weird operator to save us from infinite if statements.",1681557813484,"/images/nullish_assign_operator.png","Another weird operator to save us from infinite `if` statements.\n\n## Falsy\n\nA Falsy is a value considered false in a boolean context.\nThe following values are the falsy values in Javascript\n\n`null`, `undefined`, `false`, `NaN`, `0`, `-0`, `0n`, `\"\"`, `document.all`\n\n## Truthy\n\nA Truthy value is a value considered true in a boolean context.\nIf values are not falsy, then they’re all truthy.\n\n## Nullish\n\nA Nullish value is the value which is either `null` or `undefined`, which is always falsy.\n\n## &&= Logical AND assignment\n\nThis operator assigns the right term to the left term if the left term is `truthy`.\n\n```js\nlet truthyValue = 1\nlet falsyValue = false\n\ntruthyValue &&= 2\nfalsyValue &&= 3\n\nconsole.log(truthyValue, falsyValue)\n// Expected output: 2, false\n```\n\n## ||= **Logical OR assignment**\n\nThis operator assigns the right term to the left term if the left term is `falsy`.\n\n```js\nlet truthyValue = 1\nlet falsyValue = false\n\ntruthyValue ||= 2\nfalsyValue ||= 3\n\nconsole.log(truthyValue, falsyValue)\n// Expected output: 1, 3\n```\n\n## ??= **Nullish coalescing assignment**\n\nThis operator assigns the right term to the left term if the left term is `nullish`.\n\n```js\nlet truthyValue = 1\nlet falsyValue = false\nlet nullishValue = null\n\ntruthyValue ??= 2\nfalsyValue ??= 3\nnullishValue ??= \"Hola\"\n\nconsole.log(truthyValue, falsyValue, nullishValue)\n// Expected output: 1, false, Hola\n```\n\n## References\n\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators)","src/data/post/n-a-o-operators.md","2aa8cb1d25265caf",{"html":234,"metadata":235},"\u003Cp>Another weird operator to save us from infinite \u003Ccode>if\u003C/code> statements.\u003C/p>\n\u003Ch2 id=\"falsy\">Falsy\u003C/h2>\n\u003Cp>A Falsy is a value considered false in a boolean context.\nThe following values are the falsy values in Javascript\u003C/p>\n\u003Cp>\u003Ccode>null\u003C/code>, \u003Ccode>undefined\u003C/code>, \u003Ccode>false\u003C/code>, \u003Ccode>NaN\u003C/code>, \u003Ccode>0\u003C/code>, \u003Ccode>-0\u003C/code>, \u003Ccode>0n\u003C/code>, \u003Ccode>\"\"\u003C/code>, \u003Ccode>document.all\u003C/code>\u003C/p>\n\u003Ch2 id=\"truthy\">Truthy\u003C/h2>\n\u003Cp>A Truthy value is a value considered true in a boolean context.\nIf values are not falsy, then they’re all truthy.\u003C/p>\n\u003Ch2 id=\"nullish\">Nullish\u003C/h2>\n\u003Cp>A Nullish value is the value which is either \u003Ccode>null\u003C/code> or \u003Ccode>undefined\u003C/code>, which is always falsy.\u003C/p>\n\u003Ch2 id=\"-logical-and-assignment\">&#x26;&#x26;= Logical AND assignment\u003C/h2>\n\u003Cp>This operator assigns the right term to the left term if the left term is \u003Ccode>truthy\u003C/code>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> truthyValue \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> falsyValue \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">truthyValue \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">falsyValue \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(truthyValue, falsyValue)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Expected output: 2, false\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"-logical-or-assignment\">||= \u003Cstrong>Logical OR assignment\u003C/strong>\u003C/h2>\n\u003Cp>This operator assigns the right term to the left term if the left term is \u003Ccode>falsy\u003C/code>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> truthyValue \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> falsyValue \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">truthyValue \u003C/span>\u003Cspan style=\"color:#F97583\">||=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">falsyValue \u003C/span>\u003Cspan style=\"color:#F97583\">||=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(truthyValue, falsyValue)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Expected output: 1, 3\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"-nullish-coalescing-assignment\">??= \u003Cstrong>Nullish coalescing assignment\u003C/strong>\u003C/h2>\n\u003Cp>This operator assigns the right term to the left term if the left term is \u003Ccode>nullish\u003C/code>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> truthyValue \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> falsyValue \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> nullishValue \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">truthyValue \u003C/span>\u003Cspan style=\"color:#F97583\">??=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">falsyValue \u003C/span>\u003Cspan style=\"color:#F97583\">??=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">nullishValue \u003C/span>\u003Cspan style=\"color:#F97583\">??=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Hola\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(truthyValue, falsyValue, nullishValue)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Expected output: 1, false, Hola\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"references\">References\u003C/h2>\n\u003Cp>\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators\u003C/a>\u003C/p>",{"headings":236,"localImagePaths":256,"remoteImagePaths":257,"frontmatter":258,"imagePaths":259},[237,240,243,246,249,252,255],{"depth":27,"slug":238,"text":239},"falsy","Falsy",{"depth":27,"slug":241,"text":242},"truthy","Truthy",{"depth":27,"slug":244,"text":245},"nullish","Nullish",{"depth":27,"slug":247,"text":248},"-logical-and-assignment","&&= Logical AND assignment",{"depth":27,"slug":250,"text":251},"-logical-or-assignment","||= Logical OR assignment",{"depth":27,"slug":253,"text":254},"-nullish-coalescing-assignment","??= Nullish coalescing assignment",{"depth":27,"slug":102,"text":103},[],[],{"title":226,"description":227,"category":62,"date":228,"image":229},[],"fouc",{"id":260,"data":262,"body":266,"filePath":267,"digest":268,"rendered":269},{"title":263,"description":264,"category":167,"date":265,"image":64},"Fixing the flickering when changing themes in Astro","With TailwindCSS",1721134506591,"## Flickering\n\nPrior to this post, this blog site had a flickering problem changing themes. And as you can see it below, it was quite annoying.\n\n![Flickering](/images/flickering.gif)\n\nAnd I thought it was unfixable and let it be because Astro is MPA and blahblahblah... until I found [this article](https://tarasov.dev/blog/how-to-add-dark-theme-in-astro/) and [this article](https://axellarsson.com/blog/astrojs-prevent-dark-mode-flicker/). Their site wasn't flickering even though it didn't use the SPA plugin. The method they used is to put the login that adds the `dark` class to the `\u003Chtml>` element into the inline `\u003Cscript>` tag in `\u003Chead>` like the code shown below.\n\n```html\n\u003Cscript is:inline>\n  localStorage.dark ??= String(\n    window.matchMedia(\"(prefers-color-scheme: dark)\").matches,\n  )\n\n  if (localStorage.dark == \"true\")\n    document.documentElement.classList.add(\"dark\")\n  else document.documentElement.classList.remove(\"dark\")\n\u003C/script>\n```\n\nBut, it didn't work for me at first. So I grinded for roughly 30 mins to find the fix and I got an idea - the ViewTransitions. I instantly removed the `\u003CViewTransitions>` tag and it finally worked.\n\n![Fixed Flickering](/images/fixed-flickering.gif)\n\n## References\n\nhttps://en.wikipedia.org/wiki/Flash_of_unstyled_content\nhttps://tarasov.dev/blog/how-to-add-dark-theme-in-astro/\nhttps://axellarsson.com/blog/astrojs-prevent-dark-mode-flicker/","src/data/post/fouc.md","55bf8d403caf0d0b",{"html":270,"metadata":271},"\u003Ch2 id=\"flickering\">Flickering\u003C/h2>\n\u003Cp>Prior to this post, this blog site had a flickering problem changing themes. And as you can see it below, it was quite annoying.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/flickering.gif\" alt=\"Flickering\">\u003C/p>\n\u003Cp>And I thought it was unfixable and let it be because Astro is MPA and blahblahblah… until I found \u003Ca href=\"https://tarasov.dev/blog/how-to-add-dark-theme-in-astro/\">this article\u003C/a> and \u003Ca href=\"https://axellarsson.com/blog/astrojs-prevent-dark-mode-flicker/\">this article\u003C/a>. Their site wasn’t flickering even though it didn’t use the SPA plugin. The method they used is to put the login that adds the \u003Ccode>dark\u003C/code> class to the \u003Ccode>&#x3C;html>\u003C/code> element into the inline \u003Ccode>&#x3C;script>\u003C/code> tag in \u003Ccode>&#x3C;head>\u003C/code> like the code shown below.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">script\u003C/span>\u003Cspan style=\"color:#B392F0\"> is:inline\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  localStorage.dark \u003C/span>\u003Cspan style=\"color:#F97583\">??=\u003C/span>\u003Cspan style=\"color:#B392F0\"> String\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    window.\u003C/span>\u003Cspan style=\"color:#B392F0\">matchMedia\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"(prefers-color-scheme: dark)\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).matches,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (localStorage.dark \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"true\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    document.documentElement.classList.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"dark\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> document.documentElement.classList.\u003C/span>\u003Cspan style=\"color:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"dark\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">script\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>But, it didn’t work for me at first. So I grinded for roughly 30 mins to find the fix and I got an idea - the ViewTransitions. I instantly removed the \u003Ccode>&#x3C;ViewTransitions>\u003C/code> tag and it finally worked.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/fixed-flickering.gif\" alt=\"Fixed Flickering\">\u003C/p>\n\u003Ch2 id=\"references\">References\u003C/h2>\n\u003Cp>\u003Ca href=\"https://en.wikipedia.org/wiki/Flash_of_unstyled_content\">https://en.wikipedia.org/wiki/Flash_of_unstyled_content\u003C/a>\n\u003Ca href=\"https://tarasov.dev/blog/how-to-add-dark-theme-in-astro/\">https://tarasov.dev/blog/how-to-add-dark-theme-in-astro/\u003C/a>\n\u003Ca href=\"https://axellarsson.com/blog/astrojs-prevent-dark-mode-flicker/\">https://axellarsson.com/blog/astrojs-prevent-dark-mode-flicker/\u003C/a>\u003C/p>",{"headings":272,"localImagePaths":277,"remoteImagePaths":278,"frontmatter":279,"imagePaths":280},[273,276],{"depth":27,"slug":274,"text":275},"flickering","Flickering",{"depth":27,"slug":102,"text":103},[],[],{"title":263,"description":264,"category":167,"date":265,"image":64},[],"core-web-vitals",{"id":281,"data":283,"body":288,"filePath":289,"digest":290,"rendered":291},{"title":284,"description":285,"category":167,"date":286,"image":287},"Core Web Vitals","Recommendations for LCP, TTFB, FID, INP announced at Google I/O.",1684936123984,"/images/core_web_vitals.png","This article is a summary of website optimization methods presented at [Google I/O 2023](https://io.google/2023/program/8d0bf949-1933-4358-b41a-561f8678974c/).\n\n## Largest Contentful Paint\n\n### Ensure the LCP resource is discovered from the HTML source\n\nThis helps browser’s preload scanner find and load the images.\n\n`background-image` and `loading=\"lazy\"` properties may have discoverability problems.\n\n```html\n\u003Cimg src=\"/adsf.jpg\" loading=\"lazy\" />\n\u003Cimg style=\"background-image: url(asdf.jpg)\" />\n\u003Cimg data-src=\"/asdf.jpg\" />\n```\n\nTo fix this, you can use a traditional image element, or add a preload link.\n\n```html\n\u003Cimg src=\"/adsf.jpg\" alt=\"asdf\" />\n\n\u003Clink rel=\"preload\" href=\"/adsf.jpg\" as=\"image\" />\n```\n\n### Ensure the LCP resource is prioritized\n\nUsing the new Fetch priority API can help prioritize the resource.\n\n```html\n\u003Cimg src=\"lcp.jpg\" alt=\"...\" fetchpriority=\"high\" />\n```\n\n> 💡 Note: this feature can cause compatibillity issues ([browser_compatibility](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/fetchPriority#browser_compatibility))\n\n### Use a CDN to optimize document and resource TTFB\n\n_TTFB means “time to first byte”_\n\nBrowser cannot load any resources until it receives the first byte of the initial HTML document response. The sooner you can get the first bytes to the browser the sooner the browser can start processing it.\n\nSo, the ways to reduce TTFB is to **reduce the distance between users and servers** and **cache the content**.\n\n## Cumulative Layout Shift\n\n### Set explicit sizes on any content loaded from the page\n\nExample: an image without dimensions will cause CLS.\n\n```html\n\u003Cimg src=\"adf.jpg\" alt=\"asdf\" />\n\n\u003C!-- Explicitly setting width and height -->\n\u003Cimg src=\"adf.jpg\" alt=\"asdf\" width=\"200\" height=\"200\" />\n```\n\n```css\nvideo {\n  width: 100%;\n  height: auto;\n  aspect-ratio: 16 / 9;\n}\n```\n\n```css\n.ad {\n  min-height: 1rem;\n}\n```\n\n### Ensure pages are eligible for the bfcache\n\n[bfcache](https://web.dev/i18n/ko/bfcache/)\n\nChrome dev tools → Application → Back/forward cache test\n\n### Avoid animations/transitions that use layout-inducing CSS properties\n\nLayout-inducing animations make the browser layout the page again, so the browser has to do more work. The `absolute` positioned elements are also the same. Don’t use `top` , `right`, `left`, and `bottom` properties. Use non-layout-inducing CSS properties like `translate`, `scale`, `rotate`, `skew`, `matrix`, and `opacity`.\n\n## First Input Delay / Interactions to Next Paint\n\n### Avoid or break up long tasks\n\n[https://web.dev/optimize-long-tasks/](https://web.dev/optimize-long-tasks/)\n\n### Avoid unnecessary JavaScript\n\nchrome devtools coverage feature, code splitting\n\n### Avoid large rendering updates\n\nKeep your DOM size small, CSS contain or content-visibillity, only use `requestAnimationFrame` for critical visual updates.\n\n### Useful Tools\n\n[PageSpeed Insights](https://pagespeed.web.dev)","src/data/post/core-web-vitals.md","78fee0d235a02ec7",{"html":292,"metadata":293},"\u003Cp>This article is a summary of website optimization methods presented at \u003Ca href=\"https://io.google/2023/program/8d0bf949-1933-4358-b41a-561f8678974c/\">Google I/O 2023\u003C/a>.\u003C/p>\n\u003Ch2 id=\"largest-contentful-paint\">Largest Contentful Paint\u003C/h2>\n\u003Ch3 id=\"ensure-the-lcp-resource-is-discovered-from-the-html-source\">Ensure the LCP resource is discovered from the HTML source\u003C/h3>\n\u003Cp>This helps browser’s preload scanner find and load the images.\u003C/p>\n\u003Cp>\u003Ccode>background-image\u003C/code> and \u003Ccode>loading=\"lazy\"\u003C/code> properties may have discoverability problems.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">img\u003C/span>\u003Cspan style=\"color:#B392F0\"> src\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/adsf.jpg\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> loading\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"lazy\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">img\u003C/span>\u003Cspan style=\"color:#B392F0\"> style\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"background-image: url(asdf.jpg)\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">img\u003C/span>\u003Cspan style=\"color:#B392F0\"> data-src\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/asdf.jpg\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>To fix this, you can use a traditional image element, or add a preload link.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">img\u003C/span>\u003Cspan style=\"color:#B392F0\"> src\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/adsf.jpg\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> alt\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"asdf\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">link\u003C/span>\u003Cspan style=\"color:#B392F0\"> rel\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"preload\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> href\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/adsf.jpg\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> as\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"image\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"ensure-the-lcp-resource-is-prioritized\">Ensure the LCP resource is prioritized\u003C/h3>\n\u003Cp>Using the new Fetch priority API can help prioritize the resource.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">img\u003C/span>\u003Cspan style=\"color:#B392F0\"> src\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"lcp.jpg\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> alt\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"...\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetchpriority\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"high\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cblockquote>\n\u003Cp>💡 Note: this feature can cause compatibillity issues (\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/fetchPriority#browser_compatibility\">browser_compatibility\u003C/a>)\u003C/p>\n\u003C/blockquote>\n\u003Ch3 id=\"use-a-cdn-to-optimize-document-and-resource-ttfb\">Use a CDN to optimize document and resource TTFB\u003C/h3>\n\u003Cp>\u003Cem>TTFB means “time to first byte”\u003C/em>\u003C/p>\n\u003Cp>Browser cannot load any resources until it receives the first byte of the initial HTML document response. The sooner you can get the first bytes to the browser the sooner the browser can start processing it.\u003C/p>\n\u003Cp>So, the ways to reduce TTFB is to \u003Cstrong>reduce the distance between users and servers\u003C/strong> and \u003Cstrong>cache the content\u003C/strong>.\u003C/p>\n\u003Ch2 id=\"cumulative-layout-shift\">Cumulative Layout Shift\u003C/h2>\n\u003Ch3 id=\"set-explicit-sizes-on-any-content-loaded-from-the-page\">Set explicit sizes on any content loaded from the page\u003C/h3>\n\u003Cp>Example: an image without dimensions will cause CLS.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">img\u003C/span>\u003Cspan style=\"color:#B392F0\"> src\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"adf.jpg\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> alt\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"asdf\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">&#x3C;!-- Explicitly setting width and height -->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">img\u003C/span>\u003Cspan style=\"color:#B392F0\"> src\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"adf.jpg\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> alt\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"asdf\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"200\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> height\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"200\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">video\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  height\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">auto\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  aspect-ratio\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">16\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> / \u003C/span>\u003Cspan style=\"color:#79B8FF\">9\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">.ad\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  min-height\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#F97583\">rem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"ensure-pages-are-eligible-for-the-bfcache\">Ensure pages are eligible for the bfcache\u003C/h3>\n\u003Cp>\u003Ca href=\"https://web.dev/i18n/ko/bfcache/\">bfcache\u003C/a>\u003C/p>\n\u003Cp>Chrome dev tools → Application → Back/forward cache test\u003C/p>\n\u003Ch3 id=\"avoid-animationstransitions-that-use-layout-inducing-css-properties\">Avoid animations/transitions that use layout-inducing CSS properties\u003C/h3>\n\u003Cp>Layout-inducing animations make the browser layout the page again, so the browser has to do more work. The \u003Ccode>absolute\u003C/code> positioned elements are also the same. Don’t use \u003Ccode>top\u003C/code> , \u003Ccode>right\u003C/code>, \u003Ccode>left\u003C/code>, and \u003Ccode>bottom\u003C/code> properties. Use non-layout-inducing CSS properties like \u003Ccode>translate\u003C/code>, \u003Ccode>scale\u003C/code>, \u003Ccode>rotate\u003C/code>, \u003Ccode>skew\u003C/code>, \u003Ccode>matrix\u003C/code>, and \u003Ccode>opacity\u003C/code>.\u003C/p>\n\u003Ch2 id=\"first-input-delay--interactions-to-next-paint\">First Input Delay / Interactions to Next Paint\u003C/h2>\n\u003Ch3 id=\"avoid-or-break-up-long-tasks\">Avoid or break up long tasks\u003C/h3>\n\u003Cp>\u003Ca href=\"https://web.dev/optimize-long-tasks/\">https://web.dev/optimize-long-tasks/\u003C/a>\u003C/p>\n\u003Ch3 id=\"avoid-unnecessary-javascript\">Avoid unnecessary JavaScript\u003C/h3>\n\u003Cp>chrome devtools coverage feature, code splitting\u003C/p>\n\u003Ch3 id=\"avoid-large-rendering-updates\">Avoid large rendering updates\u003C/h3>\n\u003Cp>Keep your DOM size small, CSS contain or content-visibillity, only use \u003Ccode>requestAnimationFrame\u003C/code> for critical visual updates.\u003C/p>\n\u003Ch3 id=\"useful-tools\">Useful Tools\u003C/h3>\n\u003Cp>\u003Ca href=\"https://pagespeed.web.dev\">PageSpeed Insights\u003C/a>\u003C/p>",{"headings":294,"localImagePaths":335,"remoteImagePaths":336,"frontmatter":337,"imagePaths":338},[295,298,302,305,308,311,314,317,320,323,326,329,332],{"depth":27,"slug":296,"text":297},"largest-contentful-paint","Largest Contentful Paint",{"depth":299,"slug":300,"text":301},3,"ensure-the-lcp-resource-is-discovered-from-the-html-source","Ensure the LCP resource is discovered from the HTML source",{"depth":299,"slug":303,"text":304},"ensure-the-lcp-resource-is-prioritized","Ensure the LCP resource is prioritized",{"depth":299,"slug":306,"text":307},"use-a-cdn-to-optimize-document-and-resource-ttfb","Use a CDN to optimize document and resource TTFB",{"depth":27,"slug":309,"text":310},"cumulative-layout-shift","Cumulative Layout Shift",{"depth":299,"slug":312,"text":313},"set-explicit-sizes-on-any-content-loaded-from-the-page","Set explicit sizes on any content loaded from the page",{"depth":299,"slug":315,"text":316},"ensure-pages-are-eligible-for-the-bfcache","Ensure pages are eligible for the bfcache",{"depth":299,"slug":318,"text":319},"avoid-animationstransitions-that-use-layout-inducing-css-properties","Avoid animations/transitions that use layout-inducing CSS properties",{"depth":27,"slug":321,"text":322},"first-input-delay--interactions-to-next-paint","First Input Delay / Interactions to Next Paint",{"depth":299,"slug":324,"text":325},"avoid-or-break-up-long-tasks","Avoid or break up long tasks",{"depth":299,"slug":327,"text":328},"avoid-unnecessary-javascript","Avoid unnecessary JavaScript",{"depth":299,"slug":330,"text":331},"avoid-large-rendering-updates","Avoid large rendering updates",{"depth":299,"slug":333,"text":334},"useful-tools","Useful Tools",[],[],{"title":284,"description":285,"category":167,"date":286,"image":287},[],"symbol",{"id":339,"data":341,"body":346,"filePath":347,"digest":348,"rendered":349},{"title":342,"description":343,"category":62,"date":344,"image":345},"The Symbol Type","The only type guaranteed to be unique",1682343587516,"/images/symbol.png","# Symbol\n\nThe Symbol type is a new primitive type in JavaScript that was introduced in ECMAScript 2015 (ES6). It was added as a way to create unique identifiers that cannot be duplicated. The Symbol type is often used as keys within objects, as they are guaranteed to be unique.\n\nTo create a symbol, you can use the `Symbol()` function. The `Symbol()` function takes an optional string argument, which can be used to describe the symbol for debugging purposes.\n\nSince symbols are guaranteed to be unique, even if we create a lot of symbols with the same description, Each symbol is unique from the others. So the description doesn’t affect anything.\n\n```js\nconst idSymbol1 = Symbol(\"id\")\nconst idSymbol2 = Symbol(\"id\")\n\nconsole.log(idSymbol1 == idSymbol2) // false\n```\n\nSymbols can also be used as properties on objects. Here's an example of using a symbol as a property on an object:\n\n```js\nconst mySymbol = Symbol(\"my description\")\nconst obj = {\n  [mySymbol]: \"value\",\n}\n\nconsole.log(obj[mySymbol]) // 'value'\n```\n\n## Not enumerable\n\nOne important thing to note is that symbols are not enumerable, which means they will not be included in for...in loops and `Object.keys()`. However, you can use the `Object.getOwnPropertySymbols()` method to get an array of all symbols on an object.\n\n```js\nconst mySymbol = Symbol(\"my description\")\nconst obj = {\n  [mySymbol]: \"value\",\n}\n\nconst symbols = Object.getOwnPropertySymbols(obj)\nconsole.log(symbols[0]) // Symbol(my description)\n```\n\nOverall, the Symbol type is a powerful addition to JavaScript that allows developers to create unique identifiers that cannot be duplicated.\n\n## Global Symbols\n\nSometimes, you may want to create a symbol accessible across files. To create that symbol, you can use `Symbol.for()` function. Unlike the `Symbol()` function, it takes an argument named `key` , which affects the uniqueness of the symbol. if the keys are the same in a global symbol, the symbol is also the same.\n\n```js\nconst id = Symbol.for(\"id\")\nconst idToo = Symbol.for(\"id\")\n\nconsole.log(id === idToo) // true\n```\n\n## References\n\n[https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Symbol](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Symbol)","src/data/post/symbol.md","c3a07f83daff5f9a",{"html":350,"metadata":351},"\u003Ch1 id=\"symbol\">Symbol\u003C/h1>\n\u003Cp>The Symbol type is a new primitive type in JavaScript that was introduced in ECMAScript 2015 (ES6). It was added as a way to create unique identifiers that cannot be duplicated. The Symbol type is often used as keys within objects, as they are guaranteed to be unique.\u003C/p>\n\u003Cp>To create a symbol, you can use the \u003Ccode>Symbol()\u003C/code> function. The \u003Ccode>Symbol()\u003C/code> function takes an optional string argument, which can be used to describe the symbol for debugging purposes.\u003C/p>\n\u003Cp>Since symbols are guaranteed to be unique, even if we create a lot of symbols with the same description, Each symbol is unique from the others. So the description doesn’t affect anything.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> idSymbol1\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> Symbol\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"id\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> idSymbol2\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> Symbol\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"id\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(idSymbol1 \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> idSymbol2) \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Symbols can also be used as properties on objects. Here’s an example of using a symbol as a property on an object:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> mySymbol\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> Symbol\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"my description\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> obj\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  [mySymbol]: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"value\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(obj[mySymbol]) \u003C/span>\u003Cspan style=\"color:#6A737D\">// 'value'\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"not-enumerable\">Not enumerable\u003C/h2>\n\u003Cp>One important thing to note is that symbols are not enumerable, which means they will not be included in for…in loops and \u003Ccode>Object.keys()\u003C/code>. However, you can use the \u003Ccode>Object.getOwnPropertySymbols()\u003C/code> method to get an array of all symbols on an object.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> mySymbol\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> Symbol\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"my description\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> obj\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  [mySymbol]: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"value\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> symbols\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Object.\u003C/span>\u003Cspan style=\"color:#B392F0\">getOwnPropertySymbols\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(obj)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(symbols[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#6A737D\">// Symbol(my description)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Overall, the Symbol type is a powerful addition to JavaScript that allows developers to create unique identifiers that cannot be duplicated.\u003C/p>\n\u003Ch2 id=\"global-symbols\">Global Symbols\u003C/h2>\n\u003Cp>Sometimes, you may want to create a symbol accessible across files. To create that symbol, you can use \u003Ccode>Symbol.for()\u003C/code> function. Unlike the \u003Ccode>Symbol()\u003C/code> function, it takes an argument named \u003Ccode>key\u003C/code> , which affects the uniqueness of the symbol. if the keys are the same in a global symbol, the symbol is also the same.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> id\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Symbol.\u003C/span>\u003Cspan style=\"color:#B392F0\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"id\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> idToo\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Symbol.\u003C/span>\u003Cspan style=\"color:#B392F0\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"id\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(id \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> idToo) \u003C/span>\u003Cspan style=\"color:#6A737D\">// true\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"references\">References\u003C/h2>\n\u003Cp>\u003Ca href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Symbol\u003C/a>\u003C/p>",{"headings":352,"localImagePaths":363,"remoteImagePaths":364,"frontmatter":365,"imagePaths":366},[353,356,359,362],{"depth":354,"slug":339,"text":355},1,"Symbol",{"depth":27,"slug":357,"text":358},"not-enumerable","Not enumerable",{"depth":27,"slug":360,"text":361},"global-symbols","Global Symbols",{"depth":27,"slug":102,"text":103},[],[],{"title":342,"description":343,"category":62,"date":344,"image":345},[],"structured-clone",{"id":367,"data":369,"body":374,"filePath":375,"digest":376,"rendered":377},{"title":370,"description":371,"category":62,"date":372,"image":373},"structuredClone()","A native way to do a deep copy",1681908270291,"/images/structured_clone.png","# structuredClone\n\nThe `structuredClone()` is the method which allows us to create a deep clone.\n\n## Deep Copy\n\nA deep copy of an object is a copy whose properties do not share the same references.\n\n## The Problem\n\nIf you just assign an object to another value, the value will points the same object.\n\nIn this code, we assigned `obj1` to `obj2` and changed `obj2`'s `a` property to `2`, but `obj1`'s property was also changed to `2`, which can have unwanted and unexpected consequences.\n\n```tsx\nconst obj1 = {\n  a: 1,\n}\nconst obj2 = obj1\n\nobj2.a = 2\n\nconsole.log(obj1.a) // Output: 2\n```\n\n## Why don’t you use…\n\n### `Object.assign(obj2, obj1)`\n\nThis method **only works if there are no nested objects**. If there are nested objects, they are not copied, but point to the original value. This is the same as `{ ...obj1 }`, `Object.create()`.\n\n```tsx\nconst obj1 = {\n  nestedObject: [1],\n}\nconst obj2 = {}\n\nObject.assign(obj2, obj1)\n\nobj2.nestedObject.push(2)\n\nconsole.log(obj1.nestedObject.at(1)) // Output: 2\n```\n\n## `JSON.parse(JSON.stringify())`\n\nYes, this method works even if you have nested objects. However, `JSON.stringify` can only handle primitive types like `number` and `string`. So if you have values that are not compatible with `JSON.stringify`, this method will not work.\n\n```jsx\nconst obj1 = {\n  bigint: 2n,\n}\n\nconst obj2 = JSON.parse(JSON.stringify(obj1))\n```\n\n```tsx\nUncaught TypeError: ***BigInt value can't be serialized in JSON***\n```\n\n## ✊  `structuredClone()`\n\nThis method works even if you have nested objects and non-basic types such as `BigInt`, `Set`.\n\n```tsx\nconst obj1 = {\n  nested: [1],\n  bigint: 3n,\n}\n\nconst obj2 = structuredClone(obj1)\n\nobj2.nested.push(2)\n\nconsole.log(obj1.nested.at(0)) // Output: 1\n```\n\n## References\n\n[https://developer.mozilla.org/en-US/docs/Web/API/structuredClone](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone)","src/data/post/structured-clone.md","1aafd8b7d7323506",{"html":378,"metadata":379},"\u003Ch1 id=\"structuredclone\">structuredClone\u003C/h1>\n\u003Cp>The \u003Ccode>structuredClone()\u003C/code> is the method which allows us to create a deep clone.\u003C/p>\n\u003Ch2 id=\"deep-copy\">Deep Copy\u003C/h2>\n\u003Cp>A deep copy of an object is a copy whose properties do not share the same references.\u003C/p>\n\u003Ch2 id=\"the-problem\">The Problem\u003C/h2>\n\u003Cp>If you just assign an object to another value, the value will points the same object.\u003C/p>\n\u003Cp>In this code, we assigned \u003Ccode>obj1\u003C/code> to \u003Ccode>obj2\u003C/code> and changed \u003Ccode>obj2\u003C/code>’s \u003Ccode>a\u003C/code> property to \u003Ccode>2\u003C/code>, but \u003Ccode>obj1\u003C/code>’s property was also changed to \u003Ccode>2\u003C/code>, which can have unwanted and unexpected consequences.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> obj1\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  a: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> obj2\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> obj1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">obj2.a \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(obj1.a) \u003C/span>\u003Cspan style=\"color:#6A737D\">// Output: 2\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"why-dont-you-use\">Why don’t you use…\u003C/h2>\n\u003Ch3 id=\"objectassignobj2-obj1\">\u003Ccode>Object.assign(obj2, obj1)\u003C/code>\u003C/h3>\n\u003Cp>This method \u003Cstrong>only works if there are no nested objects\u003C/strong>. If there are nested objects, they are not copied, but point to the original value. This is the same as \u003Ccode>{ ...obj1 }\u003C/code>, \u003Ccode>Object.create()\u003C/code>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> obj1\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  nestedObject: [\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> obj2\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Object.\u003C/span>\u003Cspan style=\"color:#B392F0\">assign\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(obj2, obj1)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">obj2.nestedObject.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(obj1.nestedObject.\u003C/span>\u003Cspan style=\"color:#B392F0\">at\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) \u003C/span>\u003Cspan style=\"color:#6A737D\">// Output: 2\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"jsonparsejsonstringify\">\u003Ccode>JSON.parse(JSON.stringify())\u003C/code>\u003C/h2>\n\u003Cp>Yes, this method works even if you have nested objects. However, \u003Ccode>JSON.stringify\u003C/code> can only handle primitive types like \u003Ccode>number\u003C/code> and \u003Ccode>string\u003C/code>. So if you have values that are not compatible with \u003Ccode>JSON.stringify\u003C/code>, this method will not work.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> obj1\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  bigint: \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\">n\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> obj2\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> JSON\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">JSON\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">stringify\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(obj1))\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Uncaught \u003C/span>\u003Cspan style=\"color:#B392F0\">TypeError\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#F97583\">***\u003C/span>\u003Cspan style=\"color:#E1E4E8\">BigInt value can\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'t be serialized in JSON**\u003C/span>\u003Cspan style=\"color:#FDAEB7;font-style:italic\">*\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"-structuredclone\">✊  \u003Ccode>structuredClone()\u003C/code>\u003C/h2>\n\u003Cp>This method works even if you have nested objects and non-basic types such as \u003Ccode>BigInt\u003C/code>, \u003Ccode>Set\u003C/code>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> obj1\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  nested: [\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  bigint: \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#F97583\">n\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> obj2\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> structuredClone\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(obj1)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">obj2.nested.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(obj1.nested.\u003C/span>\u003Cspan style=\"color:#B392F0\">at\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) \u003C/span>\u003Cspan style=\"color:#6A737D\">// Output: 1\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"references\">References\u003C/h2>\n\u003Cp>\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/structuredClone\">https://developer.mozilla.org/en-US/docs/Web/API/structuredClone\u003C/a>\u003C/p>",{"headings":380,"localImagePaths":401,"remoteImagePaths":402,"frontmatter":403,"imagePaths":404},[381,384,387,388,391,394,397,400],{"depth":354,"slug":382,"text":383},"structuredclone","structuredClone",{"depth":27,"slug":385,"text":386},"deep-copy","Deep Copy",{"depth":27,"slug":28,"text":29},{"depth":27,"slug":389,"text":390},"why-dont-you-use","Why don’t you use…",{"depth":299,"slug":392,"text":393},"objectassignobj2-obj1","Object.assign(obj2, obj1)",{"depth":27,"slug":395,"text":396},"jsonparsejsonstringify","JSON.parse(JSON.stringify())",{"depth":27,"slug":398,"text":399},"-structuredclone","✊  structuredClone()",{"depth":27,"slug":102,"text":103},[],[],{"title":370,"description":371,"category":62,"date":372,"image":373},[]]